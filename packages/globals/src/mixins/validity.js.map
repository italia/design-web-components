{"version":3,"file":"validity.js","sourceRoot":"","sources":["validity.ts"],"names":[],"mappings":"AAAA;;;;;;;GAOG;AAEH;;GAEG;AACH,MAAM,CAAN,IAAY,iBAUT;AAVH,WAAY,iBAAiB;IACzB;;OAEG;IACH,kCAAa,CAAA;IAEb;;OAEG;IACH,gDAA2B,CAAA;AAC7B,CAAC,EAVS,iBAAiB,KAAjB,iBAAiB,QAU1B;AAED;;;GAGG;AACH,MAAM,aAAa,GAAG,CAAqC,IAAO,EAAE,EAAE;IACpE,MAAe,iBAAkB,SAAQ,IAAI;QAC3C,sEAAsE;QACtE,oFAAoF;QACpF;;;;WAIG;QACH,mBAAmB,CAAC,KAAa;YAC/B,OAAO;gBACL,CAAC,iBAAiB,CAAC,QAAQ,CAAC,EAAE,EAAE;gBAChC,CAAC,iBAAiB,CAAC,cAAc,CAAC,EAAE,IAAI,CAAC,uBAAuB;aACjE,CAAC,KAAK,CAAC,CAAC;QACX,CAAC;QAED,sEAAsE;QACtE,oFAAoF;QACpF;;;;;WAKG;QACH,aAAa;YACX,MAAM,EAAE,QAAQ,EAAE,KAAK,EAAE,GAAG,IAAI,CAAC;YACjC,OAAO,QAAQ,IAAI,CAAC,KAAK;gBACvB,CAAC,CAAC,iBAAiB,CAAC,cAAc;gBAClC,CAAC,CAAC,iBAAiB,CAAC,QAAQ,CAAC;QACjC,CAAC;QA2BD;;;;;WAKG;QACH,aAAa;YACX,MAAM,MAAM,GAAG,IAAI,CAAC,aAAa,EAAE,CAAC;YACpC,IAAI,MAAM,KAAK,iBAAiB,CAAC,QAAQ,EAAE,CAAC;gBAC1C,IACE,IAAI,CAAC,aAAa,CAChB,IAAI,WAAW,CAAC,SAAS,EAAE;oBACzB,OAAO,EAAE,KAAK;oBACd,UAAU,EAAE,IAAI;oBAChB,QAAQ,EAAE,KAAK;iBAChB,CAAC,CACH,EACD,CAAC;oBACD,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;oBACpB,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC,mBAAmB,CAAC,MAAM,CAAW,CAAC;gBACpE,CAAC;gBACD,OAAO,KAAK,CAAC;YACf,CAAC;YACD,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC;YACrB,IAAI,CAAC,eAAe,GAAG,EAAE,CAAC;YAC1B,OAAO,IAAI,CAAC;QACd,CAAC;QAED;;;;WAIG;QACH,iBAAiB,CAAC,eAAuB;YACvC,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC,eAAe,CAAC,CAAC;YACxC,IAAI,CAAC,eAAe,GAAG,eAAe,CAAC;QACzC,CAAC;KACF;IACD,OAAO,iBAAiB,CAAC;AAC3B,CAAC,CAAC;AAEF,eAAe,aAAa,CAAC","sourcesContent":["/**\n * @license\n *\n * Copyright IBM Corp. 2020, 2022\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n/**\n * Form validation status.\n */\nexport enum VALIDATION_STATUS {\n    /**\n     * One indicating no validation error.\n     */\n    NO_ERROR = '',\n  \n    /**\n     * One indicating missing required value.\n     */\n    ERROR_REQUIRED = 'required',\n  }\n  \n  /**\n   * @param Base The base class.\n   * @returns A mix-in implementing `.setCustomValidity()` method.\n   */\n  const ValidityMixin = <T extends Constructor<HTMLElement>>(Base: T) => {\n    abstract class ValidityMixinImpl extends Base {\n      // Not using TypeScript `protected` due to: microsoft/TypeScript#17744\n      // Using `string` instead of `VALIDATION_STATUS` until we can require TypeScript 3.8\n      /**\n       * @param state The form validation status.\n       * @returns The form validation error messages associated with the given status.\n       * @protected\n       */\n      _getValidityMessage(state: string) {\n        return {\n          [VALIDATION_STATUS.NO_ERROR]: '',\n          [VALIDATION_STATUS.ERROR_REQUIRED]: this.requiredValidityMessage,\n        }[state];\n      }\n  \n      // Not using TypeScript `protected` due to: microsoft/TypeScript#17744\n      // Using `string` instead of `VALIDATION_STATUS` until we can require TypeScript 3.8\n      /**\n       * Checks if the value meets the constraints.\n       *\n       * @returns `VALIDATION_STATUS.NO_ERROR` if the value meets the constraints. Some other values otherwise.\n       * @protected\n       */\n      _testValidity(): string {\n        const { required, value } = this;\n        return required && !value\n          ? VALIDATION_STATUS.ERROR_REQUIRED\n          : VALIDATION_STATUS.NO_ERROR;\n      }\n  \n      /**\n       * `true` to show the UI of the invalid state.\n       */\n      abstract invalid: boolean;\n  \n      /**\n       * `true` if the value is required.\n       */\n      abstract required: boolean;\n  \n      /**\n       * The special validity message for `required`.\n       */\n      abstract requiredValidityMessage: string;\n  \n      /**\n       * The validity message.\n       */\n      abstract validityMessage: string;\n  \n      /**\n       * The value.\n       */\n      abstract value: string;\n  \n      /**\n       * Checks if the value meets the constraints.\n       * Fires cancelable `invalid` event if it doesn't.\n       *\n       * @returns `true` if the value meets the constraints. `false` otherwise.\n       */\n      checkValidity() {\n        const status = this._testValidity();\n        if (status !== VALIDATION_STATUS.NO_ERROR) {\n          if (\n            this.dispatchEvent(\n              new CustomEvent('invalid', {\n                bubbles: false,\n                cancelable: true,\n                composed: false,\n              })\n            )\n          ) {\n            this.invalid = true;\n            this.validityMessage = this._getValidityMessage(status) as string;\n          }\n          return false;\n        }\n        this.invalid = false;\n        this.validityMessage = '';\n        return true;\n      }\n  \n      /**\n       * Sets the given custom validity message.\n       *\n       * @param validityMessage The custom validity message\n       */\n      setCustomValidity(validityMessage: string) {\n        this.invalid = Boolean(validityMessage);\n        this.validityMessage = validityMessage;\n      }\n    }\n    return ValidityMixinImpl;\n  };\n  \n  export default ValidityMixin;"]}